package com.fujitsu.edgewareroad.trivyutils.dto.trivyscan;

import java.util.Collection;
import java.util.TreeSet;

import com.fujitsu.edgewareroad.trivyutils.dto.prioritymodel.PriorityModel;
import com.fujitsu.edgewareroad.trivyutils.dto.prioritymodel.VulnerabilityPriority;

import java.util.HashSet;

public class TrivyScanVulnerabilitySet<T extends TrivyScanVulnerability> extends HashSet<T> {

    public TrivyScanVulnerabilitySet()
    {
        super();
    }

    public TrivyScanVulnerabilitySet(Collection<T> collection)
    {
        this(collection, null);
    }
    
    public TrivyScanVulnerabilitySet(Collection<T> collection, Boolean inPreviousScan)
    {
        super(collection);
        if (inPreviousScan != null)
        {
            for (TrivyScanVulnerability vuln : this)
            {
                vuln.setWasInPreviousScan(inPreviousScan);
            }
        }
    }

    public void prioritiseForRemediation(PriorityModel priorityModel)
    {
        for (T vulnerability : this)
        {
            vulnerability.prioritiseForRemediation(priorityModel);
        }
    }

    public TrivyScanVulnerabilitySet<T> getVulnerabilitiesAtPriority(String priorityName)
    {
        try
        {
            VulnerabilityPriority priority = VulnerabilityPriority.valueOf(priorityName);
            return getVulnerabilitiesAtPriority(priority);
        }
        catch(IllegalArgumentException e)
        {
            // The severity doesn't exist.
            return null;
        }
    }

    /**
     * Gets vulnerabilities filtered by chosen priority
     * @param priority The target priority to filter by
     * @return Vulnerabilities at the chosen priority
     */
    public TrivyScanVulnerabilitySet<T> getVulnerabilitiesAtPriority(VulnerabilityPriority priority)
    {
        TrivyScanVulnerabilitySet<T> vulnerabilitiesToReturn = new TrivyScanVulnerabilitySet<>();

        for(T vulnerability : this)
        {
            if (vulnerability.getPriority().equals(priority))
            {
                vulnerabilitiesToReturn.add(vulnerability);
            }
        }

        return vulnerabilitiesToReturn;
    }    

    /**
     * Gets vulnerabilities filtered by chosen priority or higher than the chosen priority
     * @return Vulnerabilities at the chosen priority or higher than the chosen priority
     */
    public TrivyScanVulnerabilitySet<T> getVulnerabilitiesAtPriorityOrHigher(VulnerabilityPriority priority)
    {
        TrivyScanVulnerabilitySet<T> vulnerabilitiesToReturn = new TrivyScanVulnerabilitySet<>();

        for(T vulnerability : this)
        {
            if (vulnerability.getPriority().compareTo(priority) >= 0)
            {
                vulnerabilitiesToReturn.add(vulnerability);
            }
        }

        return vulnerabilitiesToReturn;
    }

    public TreeSet<T> getSorted()
    {
        TreeSet<T> sortedSet = new TreeSet<>();
        for(T vuln : this)
        {
            sortedSet.add(vuln);
        }
        return sortedSet;
    }
}
