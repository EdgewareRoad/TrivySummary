package com.fujitsu.edgewareroad.trivyutils.dto.trivyscan;

import java.time.LocalDate;

import org.springframework.util.StringUtils;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fujitsu.edgewareroad.trivyutils.dto.whitelist.WhitelistEntry;

import lombok.Getter;

public class TrivyScanWhitelistedVulnerability extends TrivyScanVulnerability {
    @JsonProperty(required = true)
    private final @Getter String whitelistingReason;
    @JsonProperty(required = true)
    private final @Getter LocalDate nextReviewDate;
    @JsonProperty(required = false)
    private @Getter LocalDate approvalDate = null;
    @JsonProperty(required = false)
    private @Getter String approvedBy = null;

    public TrivyScanWhitelistedVulnerability(TrivyScanVulnerability vulnerability, WhitelistEntry whitelistEntry)
    {
        super(vulnerability);
        if (!vulnerability.getVulnerabilityID().equalsIgnoreCase(whitelistEntry.getVulnerabilityID()))
        {
            // Houston we have a problem and we should never have got this far
            throw new IllegalArgumentException("Vulnerability IDs do not match.");
        }

        this.whitelistingReason = whitelistEntry.getReason();
        this.nextReviewDate = whitelistEntry.getNextReviewDate();
        this.approvalDate = whitelistEntry.getApprovalDate();
        this.approvedBy = whitelistEntry.getApprovedBy();
    }

    public boolean isApproved() {
        return approvalDate != null && !approvalDate.isAfter(LocalDate.now()) && StringUtils.hasText(approvedBy);
    }

    public boolean requiresReview() {
        return nextReviewDate == null || nextReviewDate.isBefore(LocalDate.now());
    }
}
