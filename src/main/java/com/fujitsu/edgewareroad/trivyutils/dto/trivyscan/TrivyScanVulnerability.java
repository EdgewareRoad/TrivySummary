package com.fujitsu.edgewareroad.trivyutils.dto.trivyscan;

import java.net.URI;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang3.builder.HashCodeBuilder;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fujitsu.edgewareroad.trivyutils.dto.prioritymodel.PriorityModel;
import com.fujitsu.edgewareroad.trivyutils.dto.prioritymodel.VulnerabilityPriority;
import com.fujitsu.edgewareroad.trivyutils.serialization.DoubleContextualSerializer;
import com.fujitsu.edgewareroad.trivyutils.serialization.Precision;

public class TrivyScanVulnerability implements Comparable<TrivyScanVulnerability>
{
    @JsonProperty("vulnerabilityID")
    private String vulnerabilityID;
    @JsonProperty("vendorSeverity")
    private VulnerabilitySeverity vendorSeverity;
    @JsonProperty("cvssScore")
    @JsonSerialize(using = DoubleContextualSerializer.class)
    @Precision(precision = 1)
    private Double cvssScore;
    @JsonProperty("epssScore")
    @JsonSerialize(using = DoubleContextualSerializer.class)
    @Precision(precision = 6)
    private Double epssScore = null;
    @JsonProperty("title")
    private String title;
    @JsonProperty("description")
    private String description;
    @JsonProperty("primaryURL")
    private URI primaryURL;
    @JsonProperty(value = "wasInPreviousScan", required = false)
    private Boolean wasInPreviousScan = null;
    @JsonProperty("packageVulnerabilities")
    private TrivyScanPackageVulnerabilities packageVulnerabilities = new TrivyScanPackageVulnerabilities();
    @JsonProperty
    private VulnerabilityPriority priority = null;
    @JsonIgnore
    private double priorityOrder;

    protected TrivyScanVulnerability(TrivyScanVulnerability vulnerability)
    {
        this.vulnerabilityID = vulnerability.vulnerabilityID;
        this.vendorSeverity = vulnerability.vendorSeverity;
        this.cvssScore = vulnerability.cvssScore;
        this.epssScore = vulnerability.epssScore;
        this.title = vulnerability.title;
        this.description = vulnerability.description;
        this.primaryURL = vulnerability.primaryURL;
        this.wasInPreviousScan = vulnerability.wasInPreviousScan;
        this.packageVulnerabilities.addAll(vulnerability.getPackageVulnerabilities());
        this.priority = vulnerability.priority;
        recalculatePriorityOrder();
    }

    public TrivyScanVulnerability(TrivyScanPackageVulnerability vulnerabilityFromScan)
    {
        vulnerabilityID = vulnerabilityFromScan.getVulnerabilityID();
        vendorSeverity = vulnerabilityFromScan.getSeverity();
        cvssScore = vulnerabilityFromScan.getCVSSScore();
        primaryURL = vulnerabilityFromScan.getPrimaryURL();
        title = vulnerabilityFromScan.getTitle();
        description = vulnerabilityFromScan.getDescription();
        packageVulnerabilities.add(vulnerabilityFromScan);
        priority = PriorityModel.getPriorityOnlyFromVendorSeverity(vendorSeverity);
        recalculatePriorityOrder();
    }
    
    public TrivyScanVulnerability(String vulnerabilityID, VulnerabilitySeverity vendorSeverity, Double cvssScore,
            Double epssScore, String title, String description, URI primaryURL) {
        this.vulnerabilityID = vulnerabilityID;
        this.vendorSeverity = vendorSeverity;
        this.cvssScore = cvssScore;
        this.epssScore = epssScore;
        this.title = title;
        this.description = description;
        this.primaryURL = primaryURL;
        this.priority = PriorityModel.getPriorityOnlyFromVendorSeverity(vendorSeverity);
        recalculatePriorityOrder();
    }

    @JsonIgnore
    public String getVulnerabilityID() {
        return vulnerabilityID;
    }

    @JsonIgnore
    public VulnerabilitySeverity getVendorSeverity() {
        return vendorSeverity;
    }

    @JsonIgnore
    public Double getCVSSScore() {
        return cvssScore;
    }

    @JsonIgnore
    public Double getEPSSScore() {
        return epssScore;
    }

    @JsonIgnore
    public double getEPSSScoreNormalised() {
        return epssScore == null ? Double.MIN_VALUE : epssScore;
    }

    public void setEPSSScore(Double epssScore) {
        this.epssScore = epssScore;
        recalculatePriorityOrder();
    }

    @JsonProperty("priority")
    public VulnerabilityPriority getPriority()
    {
        return priority;
    }

    public void prioritiseForRemediation(PriorityModel priorityModel)
    {
        this.priority = priorityModel != null ? priorityModel.getPriority(vendorSeverity, cvssScore, epssScore) : PriorityModel.getPriorityOnlyFromVendorSeverity(vendorSeverity);
        recalculatePriorityOrder();
    }

    @JsonIgnore
    public URI getPrimaryURL() {
        return primaryURL;
    }

    @JsonIgnore
    public String getTitle() {
        return title;
    }

    @JsonIgnore
    public String getDescription() {
        return description;
    }

    @JsonIgnore
    public Boolean getWasInPreviousScan() {
        return wasInPreviousScan;
    }

    @JsonProperty("references")
    public List<URI> getReferences() {
        ArrayList<URI> refs = new ArrayList<>();
        if (packageVulnerabilities != null)
        {
            for (TrivyScanPackageVulnerability packageVulnerability : packageVulnerabilities)
            {
                if (packageVulnerability.getReferences() != null)
                {
                    for (String refURIAsString : packageVulnerability.getReferences())
                    {
                        try {
                            URI refURI = URI.create(refURIAsString);
                            if (!refs.contains(refURI)) refs.add(refURI);
                        } catch (Exception e)
                        {
                            // Ignore it - wasn't a genuine URL
                        }
                    }
                }
            }
        }
        return refs;
    }
    
    @JsonProperty("nvdReference")
    public URI getNvdReference()
    {
        for(URI ref : getReferences())
        {
            try {
                if (ref.getHost().equals("nvd.nist.gov") && ref.getPath().startsWith("/vuln/detail/")) return ref;
            } catch (Exception e) {
                // Silently swallow the problem as the URI couldn't match this
            }
        }
        return null;
    }
    
    @JsonProperty("redhatReference")
    public URI getRedhatReference()
    {
        for(URI ref : getReferences())
        {
            try {
                if (ref.getHost().equals("access.redhat.com") && ref.getPath().startsWith("/security/cve/")) return ref;
            } catch (Exception e) {
                // Silently swallow the problem as the URI couldn't match this
            }
        }
        return null;
    }

    /**
     * Only used if a previous scan was conducted. Sets whether this is a new observation (false) or an old one (true)
     * @param inPreviousScan
     */
    public void setWasInPreviousScan(boolean inPreviousScan)
    {
        wasInPreviousScan = inPreviousScan;
    }

    @JsonIgnore
    public TrivyScanPackageVulnerabilities getPackageVulnerabilities()
    {
        return packageVulnerabilities;
    }

    protected void addPackageVulnerability(TrivyScanPackageVulnerability packageVulnerability)
    {
        packageVulnerabilities.add(packageVulnerability);
        if (cvssScore < packageVulnerability.getCVSSScore())
        {
            cvssScore = packageVulnerability.getCVSSScore();
        }
    }

    @Override
    public int hashCode() {
        HashCodeBuilder builder = new HashCodeBuilder(17, 23)
            .append(vulnerabilityID);
        return builder.toHashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (obj instanceof TrivyScanVulnerability)
        {
            TrivyScanVulnerability o = (TrivyScanVulnerability)obj;
            return vulnerabilityID.equals(o.vulnerabilityID);
        }
        else return false;
    }

    private void recalculatePriorityOrder() {
        Double order = priority != null ? priority.ordinal() * 100000000000.0d : 0.0d;
        order += vendorSeverity.ordinal() * 1000000000d;
        order += Double.valueOf(cvssScore * 10000000);
        order += getEPSSScoreNormalised() * 1000000;

        priorityOrder = order.doubleValue();
    }

    @Override
    public int compareTo(TrivyScanVulnerability o) {
        if (o == null) return -1;

        int comp = Double.valueOf(o.priorityOrder - this.priorityOrder).intValue();
        if (comp != 0) return comp;

        return this.vulnerabilityID.compareTo(o.vulnerabilityID);
    }
}