package com.fujitsu.edgewareroad.trivyutils.dto.trivyscan;

import java.net.URI;

import com.fasterxml.jackson.annotation.JsonProperty;

public class TrivyScanVulnerability implements Comparable<TrivyScanVulnerability>
{
    @JsonProperty("VulnerabilityID")
    private String vulnerabilityID;
    @JsonProperty("Severity")
    private VulnerabilitySeverity severity;
    @JsonProperty("SeverityScore")
    private Double severityScore;
    @JsonProperty("Title")
    private String title;
    @JsonProperty("Description")
    private String description;
    @JsonProperty("PrimaryURL")
    private URI primaryURL;
    @JsonProperty("WasInPreviousScan")
    private Boolean wasInPreviousScan = null;
    @JsonProperty("PackageVulnerabilities")
    private TrivyScanPackageVulnerabilities packageVulnerabilities = new TrivyScanPackageVulnerabilities();

    public TrivyScanVulnerability(TrivyScanPackageVulnerability vulnerabilityFromScan)
    {
        vulnerabilityID = vulnerabilityFromScan.getVulnerabilityID();
        severity = vulnerabilityFromScan.getSeverity();
        severityScore = vulnerabilityFromScan.getSeveritySourceScore();
        primaryURL = vulnerabilityFromScan.getPrimaryURL();
        title = vulnerabilityFromScan.getTitle();
        description = vulnerabilityFromScan.getDescription();
        packageVulnerabilities.add(vulnerabilityFromScan);
    }
    
    public String getVulnerabilityID() {
        return vulnerabilityID;
    }

    public VulnerabilitySeverity getSeverity() {
        return severity;
    }

    public Double getSeverityScore() {
        return severityScore;
    }

    public URI getPrimaryURL() {
        return primaryURL;
    }

    public String getTitle() {
        return title;
    }

    public String getDescription() {
        return description;
    }

    public Boolean getWasInPreviousScan() {
        return wasInPreviousScan;
    }

    /**
     * Only used if a previous scan was conducted. Sets whether this is a new observation (false) or an old one (true)
     * @param inPreviousScan
     */
    public void setWasInPreviousScan(boolean inPreviousScan)
    {
        wasInPreviousScan = inPreviousScan;
    }

    public TrivyScanPackageVulnerabilities getPackageVulnerabilities()
    {
        return packageVulnerabilities;
    }

    protected void addPackageVulnerability(TrivyScanPackageVulnerability packageVulnerability)
    {
        packageVulnerabilities.add(packageVulnerability);
        if (severityScore < packageVulnerability.getSeveritySourceScore())
        {
            severityScore = packageVulnerability.getSeveritySourceScore();
        }
    }

    @Override
    public int hashCode() {
        return vulnerabilityID.hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (obj instanceof TrivyScanVulnerability)
        {
            return vulnerabilityID.equals(((TrivyScanVulnerability)obj).vulnerabilityID);
        }
        else return false;
    }

    @Override
    public int compareTo(TrivyScanVulnerability o) {
        if (o == null) return -1;

        int compare = o.severity.compareTo(this.severity);
        if (compare != 0) return compare;
        
        compare = o.severityScore.compareTo(this.severityScore);
        if (compare != 0) return compare;
        
        return this.vulnerabilityID.compareTo(o.vulnerabilityID);
    }
}