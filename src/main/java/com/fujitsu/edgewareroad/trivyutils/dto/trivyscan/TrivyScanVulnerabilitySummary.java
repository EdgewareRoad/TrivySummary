package com.fujitsu.edgewareroad.trivyutils.dto.trivyscan;

import java.util.LinkedHashMap;

import com.fasterxml.jackson.annotation.JsonProperty;

public class TrivyScanVulnerabilitySummary {
    @JsonProperty("severityCounts")
    private LinkedHashMap<VulnerabilitySeverity, Integer> severityCounts;

    @JsonProperty("vulnerabilities")
    private TrivyScanVulnerabilities vulnerabilities = new TrivyScanVulnerabilities();

    /**
     * Creates a vulnerability summary for a single set of vulnerabilities
     * @param vulnerabilities
     */
    public TrivyScanVulnerabilitySummary(TrivyScanVulnerabilities vulnerabilities) {
        super();
        this.vulnerabilities = new TrivyScanVulnerabilities(vulnerabilities);
        updateCountsOfSeverity();
    }
    
    /**
     * Creates a vulnerability summary for two sets of vulnerabilities, one new, and one shared with the previous scan
     * @param vulnerabilities
     */
    public TrivyScanVulnerabilitySummary(TrivyScanVulnerabilities vulnerabilitiesNew, TrivyScanVulnerabilities vulnerabilitiesUnremediated) {
        super();
        this.vulnerabilities = new TrivyScanVulnerabilities(vulnerabilitiesUnremediated, Boolean.TRUE);
        TrivyScanVulnerabilities vulnsNewToAdd = new TrivyScanVulnerabilities(vulnerabilitiesNew, Boolean.FALSE);
        this.vulnerabilities.addAll(vulnsNewToAdd);
        updateCountsOfSeverity();
    }
    
    public Integer getCountOfVulnerabilitiesAtSeverity(String name)
    {
        try
        {
            VulnerabilitySeverity severity = VulnerabilitySeverity.valueOf(name);
            if (!severityCounts.containsKey(severity)) return null;
            return severityCounts.get(severity);
        }
        catch(IllegalArgumentException e)
        {
            // The severity doesn't exist.
            return null;
        }
    }

    public LinkedHashMap<VulnerabilitySeverity, Integer> getSeverityCounts() {
        return severityCounts;
    }

    public TrivyScanVulnerabilities getVulnerabilities() {
        return vulnerabilities;
    }

    private void updateCountsOfSeverity() {
        severityCounts = new LinkedHashMap<>();
        severityCounts.put(VulnerabilitySeverity.CRITICAL, vulnerabilities.getVulnerabilitiesAtSeverity(VulnerabilitySeverity.CRITICAL).size());
        severityCounts.put(VulnerabilitySeverity.HIGH, vulnerabilities.getVulnerabilitiesAtSeverity(VulnerabilitySeverity.HIGH).size());
        severityCounts.put(VulnerabilitySeverity.MEDIUM, vulnerabilities.getVulnerabilitiesAtSeverity(VulnerabilitySeverity.MEDIUM).size());
        severityCounts.put(VulnerabilitySeverity.LOW, vulnerabilities.getVulnerabilitiesAtSeverity(VulnerabilitySeverity.LOW).size());
        int unknownSeverityCount = vulnerabilities.getVulnerabilitiesAtSeverity(VulnerabilitySeverity.UNKNOWN).size();
        if (unknownSeverityCount > 0) severityCounts.put(VulnerabilitySeverity.UNKNOWN, unknownSeverityCount);
    }
}
