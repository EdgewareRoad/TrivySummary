package com.fujitsu.edgewareroad.trivyutils.dto.trivyscan;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fujitsu.edgewareroad.trivyutils.dto.prioritymodel.VulnerabilityPriority;

import lombok.Getter;

public class TrivyScanVulnerabilitySummary {
    @JsonProperty("vulnerabilities")
    private @Getter TrivyScanVulnerabilities vulnerabilities = new TrivyScanVulnerabilities();

    /**
     * Creates a vulnerability summary for a single set of vulnerabilities
     * @param vulnerabilities
     */
    public TrivyScanVulnerabilitySummary(TrivyScanVulnerabilities vulnerabilities) {
        super();
        this.vulnerabilities = new TrivyScanVulnerabilities(vulnerabilities);
    }
    
    /**
     * Creates a vulnerability summary for two sets of vulnerabilities, one new, and one shared with the previous scan
     * @param vulnerabilities
     */
    public TrivyScanVulnerabilitySummary(TrivyScanVulnerabilities vulnerabilitiesNew, TrivyScanVulnerabilities vulnerabilitiesUnremediated) {
        super();
        this.vulnerabilities = new TrivyScanVulnerabilities(vulnerabilitiesUnremediated, Boolean.TRUE);
        TrivyScanVulnerabilities vulnsNewToAdd = new TrivyScanVulnerabilities(vulnerabilitiesNew, Boolean.FALSE);
        this.vulnerabilities.addAll(vulnsNewToAdd);
    }
    
    public Integer getCountOfVulnerabilitiesAtPriority(String name)
    {
        try
        {
            VulnerabilityPriority priority = VulnerabilityPriority.valueOf(name);
            return getCountOfVulnerabilitiesAtPriority(priority);
        }
        catch(IllegalArgumentException e)
        {
            // The severity doesn't exist.
            return null;
        }
    }

    public Integer getCountOfVulnerabilitiesAtPriority(VulnerabilityPriority priority)
    {
        var filteredVulns = vulnerabilities.getVulnerabilitiesAtPriority(priority);
        return filteredVulns.size();
    }
}
