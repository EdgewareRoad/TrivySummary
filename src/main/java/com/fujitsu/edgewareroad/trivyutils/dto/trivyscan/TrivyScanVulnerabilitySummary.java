package com.fujitsu.edgewareroad.trivyutils.dto.trivyscan;

import java.util.LinkedHashMap;

import com.fasterxml.jackson.annotation.JsonProperty;

public class TrivyScanVulnerabilitySummary {
    @JsonProperty("severityCounts")
    private LinkedHashMap<VulnerabilitySeverity, Integer> severityCounts;

    @JsonProperty("vulnerabilities")
    private TrivyScanVulnerabilities vulnerabilities = new TrivyScanVulnerabilities();

    /**
     * Creates a vulnerability summary for a single set of vulnerabilities
     * @param vulnerabilities
     */
    public TrivyScanVulnerabilitySummary(TrivyScanVulnerabilities vulnerabilities) {
        super();
        this.vulnerabilities = new TrivyScanVulnerabilities(vulnerabilities);
    }
    
    /**
     * Creates a vulnerability summary for two sets of vulnerabilities, one new, and one shared with the previous scan
     * @param vulnerabilities
     */
    public TrivyScanVulnerabilitySummary(TrivyScanVulnerabilities vulnerabilitiesNew, TrivyScanVulnerabilities vulnerabilitiesUnremediated) {
        super();
        this.vulnerabilities = new TrivyScanVulnerabilities(vulnerabilitiesUnremediated, Boolean.TRUE);
        TrivyScanVulnerabilities vulnsNewToAdd = new TrivyScanVulnerabilities(vulnerabilitiesNew, Boolean.FALSE);
        this.vulnerabilities.addAll(vulnsNewToAdd);
    }
    
    public Integer getCountOfVulnerabilitiesAtSeverity(String name)
    {
        return getCountOfVulnerabilitiesAtSeverity(name, null);
    }

    public Integer getCountOfVulnerabilitiesAtSeverity(String name, Boolean priorityFilter)
    {
        try
        {
            VulnerabilitySeverity severity = VulnerabilitySeverity.valueOf(name);
            return getCountOfVulnerabilitiesAtSeverity(severity, priorityFilter);
        }
        catch(IllegalArgumentException e)
        {
            // The severity doesn't exist.
            return null;
        }
    }

    public Integer getCountOfVulnerabilitiesAtSeverity(VulnerabilitySeverity severity, Boolean priorityFilter)
    {
        TrivyScanVulnerabilities filteredVulns = vulnerabilities.getVulnerabilitiesAtSeverity(severity, priorityFilter);
        if (filteredVulns.size() == 0)
        {
            if (severity.equals(VulnerabilitySeverity.UNKNOWN)) // UNKNOWN is an unusual severity to see so we don't return it if we don't need to.
                return null;
            else
                return 0;
        }
        return filteredVulns.size();
    }

    public TrivyScanVulnerabilities getVulnerabilities() {
        return vulnerabilities;
    }
}
