package com.fujitsu.edgewareroad.trivyutils.dto.trivyscan;

import java.net.URI;
import java.util.Date;
import java.util.LinkedHashMap;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@NoArgsConstructor
public class TrivyScanPackageVulnerability implements Comparable<TrivyScanPackageVulnerability>
{
    @JsonIgnore
    private Logger logger = LoggerFactory.getLogger(TrivyScanPackageVulnerability.class);

    @JsonProperty("VulnerabilityID")
    private @Getter @Setter String vulnerabilityID;

    @JsonProperty("PkgID")
    private @Getter @Setter String pkgID;

    @JsonProperty("PkgName")
    private @Getter @Setter String pkgName;

    @JsonProperty("InstalledVersion")
    private @Getter @Setter String installedVersion;

    @JsonProperty("FixedVersion")
    private @Getter @Setter String fixedVersion;

    @JsonProperty("Layer")
    private @Getter @Setter TrivyScanVulnerabilityLayer layer;

    @JsonProperty("SeveritySource")
    private @Getter @Setter String severitySource;
    
    @JsonProperty("PrimaryURL")
    private @Getter @Setter URI primaryURL;

    @JsonProperty("DataSource")
    private @Getter @Setter TrivyScanVulnerabilityDataSource dataSource;

    @JsonProperty("Title")
    private @Getter @Setter String title;

    @JsonProperty("Description")
    private @Getter @Setter String description;

    @JsonProperty("Severity")
    private @Getter String severityRawValueFromTrivyScan;

    @JsonIgnore
    private VulnerabilitySeverity severityFromTrivyScan;

    @JsonIgnore
    private VulnerabilitySeverity severityCalculated = null;

    @JsonIgnore
    private Double cvssScore = null;

    @JsonProperty("CweIDs")
    private @Getter @Setter String[] cweIDs;

    @JsonProperty("CVSS")
    private @Getter LinkedHashMap<String, TrivyScanVulnerabilityCVSS> cvssSources = new LinkedHashMap<>();

    // Note that we use String here and not URI as the references aren't always valid URIs
    // Might be a nice exercise for a later version to improve this.
    @JsonProperty("References")
    private @Getter @Setter String[] references;

    @JsonProperty("PublishedDate")
    private @Getter @Setter Date publishedDate;
    
    @JsonProperty("LastModifiedDate")
    private @Getter @Setter Date lastModifiedDate;


    public void setSeverityRawValueFromTrivyScan(String severityRawValue) {
        this.severityRawValueFromTrivyScan = severityRawValue;
        try
        {
            this.severityFromTrivyScan = VulnerabilitySeverity.valueOf(severityRawValue);
        }
        catch(IllegalArgumentException iae)
        {
            this.severityFromTrivyScan = VulnerabilitySeverity.UNKNOWN;
        }
    }

    public VulnerabilitySeverity getSeverity() {
        return severityFromTrivyScan;
    }

    public void setCvssSources(LinkedHashMap<String, TrivyScanVulnerabilityCVSS> cvssSources) {
        this.cvssSources = new LinkedHashMap<>(cvssSources);
        calculateSeveritySourceScore();
    }

    public Double getCVSSScore()
    {
        if (cvssScore == null)
        {
            calculateSeveritySourceScore();
        }
        return cvssScore;
    }

    /**
     * Calculates the overall v3 CVSS value from the available information. If stated from a source, the calculated severity is also set as this is sometimes different from what Trivy says.
     */
    private synchronized void calculateSeveritySourceScore()
    {
        if (cvssScore != null) return;

        boolean mustGuesstimateSeverityScore = false;
        if (severitySource == null || cvssSources == null || cvssSources.size() == 0)
        {
            logger.info("No Severity Source or CVSS for {} / {} : Will guesstimate the severity score based on overall severity", this.vulnerabilityID, this.pkgID);
            mustGuesstimateSeverityScore = true;
        }
        TrivyScanVulnerabilityCVSS sourceScoring = null;
        if (!mustGuesstimateSeverityScore)
        {
            sourceScoring = cvssSources.get(severitySource);
            if (sourceScoring != null && sourceScoring.getV3Score() != null)
            {
                severityCalculated = getSeverityFromCVSSv3Score(sourceScoring.getV3Score());
                cvssScore = sourceScoring.getV3Score();
                return;
            }
            else
            {
                // Out of all the other sources, we will prioritise NVD as a government source over all other sources.
                sourceScoring = cvssSources.get("nvd");
                if (sourceScoring != null && sourceScoring.getV3Score() != null)
                {
                    logger.debug("No severity source '{}' in CVSS for {} / {} : NVD scoring is available", this.severitySource, this.vulnerabilityID, this.pkgID);
                    severityCalculated = getSeverityFromCVSSv3Score(sourceScoring.getV3Score());
                    cvssScore = sourceScoring.getV3Score();
                    return;
                }
                else
                {
                    logger.debug("No severity source '{}' in CVSS for {} / {} : Will take first severity score", this.severitySource, this.vulnerabilityID, this.pkgID);
                    for (TrivyScanVulnerabilityCVSS cvss : cvssSources.values())
                    {
                        if (cvss.getV3Score() != null){
                            severityCalculated = getSeverityFromCVSSv3Score(cvss.getV3Score());
                            cvssScore = cvss.getV3Score();
                            return;
                        }
                    }
                }
            }
        }

        logger.info("No CVSS scores for {} / {} : Guesstimating", this.vulnerabilityID, this.pkgID);

        // We assume the lowest severity score for the band
        switch (severityFromTrivyScan)
        {
            case CRITICAL:
                // Scale of 9.0-10.0 
                cvssScore = 9.0;
                return;
            case HIGH:
                // Scale of 7.0-8.9
                cvssScore = 7.0;
                return;
            case MEDIUM:
                // Scale of 4.0-6.9
                cvssScore = 4.0;
                return;
            case LOW:
                // Scale of 0.1-3.9
                cvssScore = 0.1;
                return;
            case UNKNOWN:
            default:
                // Well this is unexpected - have to assume that this is still being assessed and hence a low score
                cvssScore = 0.1;
                return;
        }
    }

    private VulnerabilitySeverity getSeverityFromCVSSv3Score(Double cvssV3Score)
    {
        if (cvssV3Score >= 9.0) return VulnerabilitySeverity.CRITICAL;
        if (cvssV3Score >= 7.0) return VulnerabilitySeverity.HIGH;
        if (cvssV3Score >= 4.0) return VulnerabilitySeverity.MEDIUM;
        return VulnerabilitySeverity.LOW;
    }

    @Override
    public int compareTo(TrivyScanPackageVulnerability that) {
        if (that == null) return 1;

        double thisScore = this.getCVSSScore();
        double thatScore = that.getCVSSScore();

        if (thisScore != thatScore)
        {
            // Note that the comparison is backwards here as we want high scores to come first
            return thatScore > thisScore ? 1 : -1;
        }
        else
        {
            return this.toString().compareTo(that.toString());  // The default comparator contains the compound business id
        }
    }

    @Override
    public String toString() {
        return String.format("%s : %s (%f)", this.getVulnerabilityID(), this.getPkgID(), this.getCVSSScore());
    }

    @Override
    public int hashCode() {
        return toString().hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        return obj != null ? this.hashCode() == obj.hashCode() : false;
    }
}