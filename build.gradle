plugins {
	id 'java'
	id 'application'
	id 'jvm-test-suite'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'maven-publish'
	id 'org.graalvm.buildtools.native' version '0.10.2'
}

group = 'com.fujitsu.edgewareroad'

def appProps = new Properties()
file("src/main/resources/application.properties").withInputStream { appProps.load(it) }

version = appProps.getProperty("trivysummary.version")

def javaHome = System.properties['java.home']

repositories {
	mavenCentral()
}

sourceSets {
        main {
                java {
                        srcDirs= ["src/main/java"]
                }
                resources {
                        srcDirs= ["src/main/resources"]
                }
        }
        test {
                java {
                        srcDirs= ["src/test/java"]
                }
                resources {
                        srcDirs= ["src/test/resources"]
                }
        }
		graal {
                java {
                        srcDirs= ["graalsrc/main/java"]
                }
		}
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
	// Note, building on Java 21 but Spring Boot 6 still allows JDK 17 compatibility, so allow for this.
	sourceCompatibility = '17'
	targetCompatibility = '17'
}

compileJava {
	options.compilerArgs << '--add-exports=java.desktop/sun.awt=ALL-UNNAMED'
}

application {
	mainClass = 'com.fujitsu.edgewareroad.trivysummary.TrivySummaryApp'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
    nativeImageClasspath.extendsFrom(graalImplementation)
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.1'
	implementation 'com.fasterxml.jackson.core:jackson-annotations:2.16.1'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.16.1'
	implementation 'org.thymeleaf:thymeleaf:3.1.2.RELEASE'
	implementation 'com.openhtmltopdf:openhtmltopdf-pdfbox:1.0.10'
	implementation 'com.openhtmltopdf:openhtmltopdf-slf4j:1.0.10'
	implementation 'com.openhtmltopdf:openhtmltopdf-jsoup-dom-converter:1.0.0'
	implementation 'com.openhtmltopdf:openhtmltopdf-svg-support:1.0.10'
	implementation 'com.openhtmltopdf:openhtmltopdf-core:1.0.10'
	implementation 'org.apache.xmlgraphics:batik-svggen:1.17'
	implementation 'org.apache.xmlgraphics:batik-dom:1.17'
	implementation 'org.apache.commons:commons-lang3:3.14.0'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

    graalCompileOnly 'org.graalvm.nativeimage:svm:21.2.0'
    graalCompileOnly 'org.graalvm.sdk:graal-sdk:21.2.0'
    nativeImageCompileOnly sourceSets.graal.output.classesDirs
}

jar {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	manifest {
		attributes(
			'Class-Path': configurations.runtimeClasspath.files.collect { it.getName() }.join(' '),
			'Main-Class': application.mainClass,
			'Implementation-Version': version
		)
	}

	from(configurations.runtimeClasspath.files.collect { it.isDirectory() ? it : zipTree(it) }) {}
}

//create a Jar of the sources
task sourcesJar(type: Jar) {
	from sourceSets.main.allSource
    archiveClassifier = "sources"
}

testing {
	suites {
		test {
			useJUnitJupiter()
			targets.all {
				testTask.configure {
					jvmArgs('-agentlib:native-image-agent=config-output-dir=build/main/generated-META-INF/native-image')
				}
			}
		}
	}
}

graalvmNative {
    binaries {
        main {
			// Main options
			imageName = 'trivysummary'
			mainClass = 'com.fujitsu.edgewareroad.trivysummary.TrivySummaryApp'
            // Advanced options
			buildArgs.add("-O4")
    	    configurationFileDirectories.from(file('build/main/generated-META-INF/native-image'), file('src/main/resources/META-INF/native-image')) // Adds a native image configuration file directory, containing files like reflection configuration
        }
		test {
            debug = true // Determines if debug info should be generated, defaults to false (alternatively add --debug-native to the CLI)
			buildArgs.add("-O0")
	        configurationFileDirectories.from(file('build/main/generated-META-INF/native-image'), file('src/main/resources/META-INF/native-image'), file('src/test/resources/META-INF/native-image')) // Adds a native image configuration file directory, containing files like reflection configuration
		}
	}
	binaries.all {
		verbose = true // Add verbose output, defaults to false
		fallback = true // Sets the fallback mode of native-image, defaults to false
		sharedLibrary = false // Determines if image is a shared library, defaults to false if `java-library` plugin isn't included
		quickBuild = false // Determines if image is being built in quick build mode (alternatively use GRAALVM_QUICK_BUILD environment variable, or add --native-quick-build to the CLI)
		richOutput = true // Determines if native-image building should be done with rich output

		buildArgs.add("--verbose")
		buildArgs.add("-H:+AddAllCharsets")
		buildArgs.add("--add-exports=java.desktop/sun.awt=ALL-UNNAMED")

		runtimeArgs.add('-Djava.home=' + javaHome)	// Gets around an AWT issue where it needs the java home property set, even if it's rubbish
	}
}

nativeCompile.dependsOn(test)
nativeTestCompile.dependsOn(test)

task copyFontsToNativeCompile(dependsOn: nativeCompile, type: Copy) {
	from javaHome + '/lib'
	into "build/native/nativeCompile/lib"
	include "*font*"
}

task copyFontsToNativeTestCompile(dependsOn: nativeTestCompile, type: Copy) {
	from javaHome + '/lib'
	into "build/native/nativeTestCompile/lib"
	include "*font*"
}

nativeCompile.finalizedBy(copyFontsToNativeCompile)
nativeTestCompile.finalizedBy(copyFontsToNativeTestCompile)

// Publishing the output to GitHub (standard JAR, sources plus POM file, distribution ZIP)
publishing {
	publications {
		maven(MavenPublication) {
			groupId 'com.fujitsu.edgewareroad'
			artifacts = [ jar, sourcesJar, distZip ]
			pom {
				name = 'trivysummary'
				description = 'Reporting app to summarise Trivy JSON output, either for single scans or to compare two scans. Also useful in CI/CD pipelines to auto-fail if vulnerabilities above a stated severity are in a component'
			}
			pom.withXml {
			    def dependenciesNode = asNode().appendNode('dependencies')
			    configurations.implementation.allDependencies.each {
			        def dependencyNode = dependenciesNode.appendNode('dependency')
			        dependencyNode.appendNode('groupId', it.group)
			        dependencyNode.appendNode('artifactId', it.name)
			        dependencyNode.appendNode('version', it.version)
			    }
			}
		}
	}
	repositories {
		maven {
			name = 'GitHubPackages'
			credentials {
				username = project.findProperty("mvnpub.user") ?: System.getenv("USERNAME")
				password = project.findProperty("mvnpub.key") ?: System.getenv("PASSWORD")
			}
			url = uri('https://maven.pkg.github.com/EdgewareRoad/TrivySummary')
		}
	}
}
